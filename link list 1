#include <iostream>

using namespace std;

class Node{
    public:
    int data;
    Node *next;
    
    
    Node(int a){
         this->data = a;
        this->next = NULL;
      
    }
    
};



void deletenode(Node* &head, int value , int *p){
    Node *temp = head;
 
    // if 1st node delete
    
    if(temp->data == value){
        head = temp->next;
        temp->next = NULL;
        
        delete temp;
    }
    // at other positiojn other than 1 
    else{
        while(value = temp->data){
            
            temp = temp->next;
        }
        
        temp
    }
}



void insertathead(Node* &head , int d , int*p){
    // creat new node
    Node *newnode = new Node(d);
    // set next ptr to head Node
    newnode->next = head;
    // head update;
    head = newnode;
    *p = *p + 1;

}


void inserttail(Node* &tail , int d , int*p){
    // create new Node
    Node * newnode = new Node(d);
    // set head next to tail 
    tail->next = newnode;
    // tail update
    tail = newnode;
     *p = *p + 1;
}


void insertatposition(Node* &head, int pos , int d , Node* &tail , int *p){
    
    
        if(*p+1 < pos){
            cout<<"invalid";
            return;
        }
    if(pos == 1){
        insertathead(head,d,p);
    }
    
   
        
    
    else{
        // create new node 
        Node * newnode = new Node(d);
        // traverse to previous node 
        Node * prev = head;
        int t = pos - 2;
        while(t--){
            prev = prev->next;
        }
        
        // connection
        newnode->next=prev->next;
        prev->next=newnode;
        
        
        if(newnode->next == NULL){
           tail = newnode;
           cout<<newnode;
        }
        
    }
}




void traverse(Node * &head){
    Node * temp = head;
    while(temp != NULL){
        cout<<temp->data<<" ";
        temp = temp->next;
    }
    cout<<endl;
}
int main()
{
   Node* first = new Node(3);
   //cout<<first->data<<endl;
   //cout<<first->next;
int size = 1;
int *p = &size;
Node *head = first;
 Node* tail = first;
insertathead(head,8,p);



inserttail(tail , 5,p);
inserttail(tail , 335,p);
inserttail(tail , 15,p);

cout<<size<<endl;


insertatposition(head,8,555,tail,p);

traverse(head);
//
Node* headd = NULL;
    Node* head = headd;
//


    return 0;
}

