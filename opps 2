Encapculation - wraping up data member / function into single unit 
security badhata hai 

1. reuseablity 
2. readibility
3. extensibity

-------------

#include <iostream>

using namespace std;
class human{
    int age ;
    public:
   void setage(int a){
        age = a;
    }
    
    int getage(){
       
       return age;
    }
};
int main()
{
    human n;
    n.setage(1);
    cout<<n.getage();

    return 0;
}
------------
inheritance - parent class se property lena 

chart sheet 
            public      private     protected 
public -    public      private     protected 
private-    private     private     private 
protected-  protected   private     protected 


types of inhetrance 

1. single inhetrance

#include <iostream>

using namespace std;

class human{
    public:
    int age;
    
};

class student : public human{
    
};
int main()
{
  student p;
  p.age = 8;
  
  cout<<p.age;

    return 0;
}

2. multilevel

#include <iostream>

using namespace std;

class human{
    public:
    int age;
    
};

class student : public human{
    public:
    string name ;
};

class aryan : public student{
    
};
int main()
{
  student p;
  p.age = 8;
  
  cout<<p.age;

aryan a;
a.age = 20;
a.name = "ankish";

cout<<a.age<<" "<<a.name;
    return 0;
}

3. Multiple inheritance.


#include <iostream>

using namespace std;

class human{
    public:
    int age;
    
};

class student {
    public:
    string name ;
};

class aryan : public student ,public human{
    
};
int main()
{
  student p;
 
aryan a;
a.age = 20;
a.name = "ankish";

cout<<a.age<<" "<<a.name;
    return 0;
}


inheritent ambiguity ke bare me padh lena
4.Hierarchical Inheritance




#include <iostream>

using namespace std;

class human{
    public:
    int age;
   
};

class student  : public human {
    public:
    string name ;
};

class aryan : public human{
   
};
int main()
{
  student p;
 cout<<p.age;
aryan a;
a.age = 20;


cout<<a.age<<" ";
    return 0;
}

5. Hybrid Inheritance.


#include <iostream>

using namespace std;

class human{
    public:
    int age;
   
};


class nothuman{
    public:
    int no;
   
};
class student  : public human {
    public:
    string name ;
};

class aryan : public human , public nothuman{
   
};

int main()
{
  student p;
 cout<<p.age;
aryan a;
a.age = 20;
a.no = 3;

cout<<a.age;
cout<<a.no;
    return 0;
}

