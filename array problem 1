#include <iostream>
using namespace std;

void inputarr(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cin >> arr[i];
    }
}

void outputarr(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << " ";
    }
}

void swap(int arr[], int size)
{
    for (int i = 0; i < size - 1; i += 2)
    {
        int temp = arr[i];
        arr[i] = arr[i + 1];
        arr[i + 1] = temp;
    }
}
// 12 34

void reverse(int arr[], int size)
{
    int p = 0;
    int j = size - 1;

    for (int i = 0; p < j; i++)
    {
        int temp = arr[p];
        arr[p] = arr[j];
        arr[j] = temp;
        p++;
        j--;
    }
}

int sort012(int arr[], int size)
{
    int zero = 0;
    int one = 0;
    int two = 0;
    for (int i = 0; i < size; i++)
    {
        if (arr[i] == 0)
        {
            zero++;
        }

        if (arr[i] == 1)
        {
            one++;
        }

        if (arr[i] == 2)
        {
            two++;
        }
    }

    int i = 0;

    while (zero != 0)
    {
        arr[i] = 0;
        zero--;
        i++;
    }

    while (one != 0)
    {
        arr[i] = 1;
        one--;
        i++;
    }

    while (two != 0)
    {
        arr[i] = 2;
        two--;
        i++;
    }
    return 0 ;
}

int palindrome(int arr[] , int size){
    int p = 0 ;
    int q = size - 1;
    
    for(int i = 0 ; i < size ; i ++){
        if(arr[p] != arr[q]){
            
            return false;
            
        }
        p++;
        q--;
    }
    return true;
}

void negative(int arr[] , int size){
    int p = 0 ;
    
    
    for(int i = 0 ; i < size ; i ++){
        if(arr[i] < 0 ){
            int temp = arr[p];
            arr[p] = arr[i];
            arr[i] = temp;
            
            p++;
        }
    }
    
}


void unionarra(int arr1[] , int arr2[] , int arr[] , int size1 , int size2  ){
  
    int i = 0 , j = 0 , p = 0; 
    
    
    while(i < size1 || j < size2){
        
         if(arr1[i] == arr1[i+1]){
           i++;
        }
        
        else if(arr2[j] == arr2[j+1]){
          j++;
        }
        else if(i >= size1){
            arr[p] = arr2[j];
            
            j++;
            p++;
        }
        
         else if (j >= size2){
            arr[p] = arr1[i];
       
            i++;
                p++;
        }
        
        
        else if(arr1[i] == arr2[j] ){
            arr[p] = arr1[i];
         
            i++;
            j++;
                p++;
        }
        
        else if(arr1[i] > arr2[j] ){
            
            arr[p] = arr2[j];
        
            j++;
                p++;
        }
        
        
         else
         {
            
            arr[p] = arr1[i];
           
            i++;
                p++;
        }
       
       
        
    }
    
    for (int i = 0; i < p; i++)
    {
        cout << arr[i] << " ";
    }
    
    
    
    
    
    
}

void interarra(int arr1[] , int arr2[] , int arr[] , int size1 , int size2  ){
  
    int i = 0 , j = 0 , p = 0; 
    
    
    while(i < size1 || j < size2){
        
         if(arr1[i] == arr1[i+1]){
           i++;
        }
        
        else if(arr2[j] == arr2[j+1]){
          j++;
        }
        
        else if(i >= size1){
        
            
            j++;
            
        }
        
         else if (j >= size2){
           
       
            i++;
            
        }
        
        
        else if(arr1[i] == arr2[j] ){
            arr[p] = arr1[i];
         
            i++;
            j++;
                p++;
        }
        
        else if(arr1[i] > arr2[j] ){
            
          
        
            j++;
             
        }
        
        
         else
         {
            
          
           
            i++;
              
        }
       
       
        
    }
    
    for (int i = 0; i < p; i++)
    {
        cout << arr[i] << " ";
    }
    
    
    
    
    
    
}


void cyclicrotate(int arr[] , int size , int n){
    
   
    int j = size -2 ;
    
    for(int k = 1 ; k <= n ; k++){
    for(int i = j ; i >=0 ; i--){
        int temp = arr[i+1];
        arr[i+1] = arr[i];
        arr[i] = temp;
    }
    outputarr(arr, size);
    cout<<endl;
    }
    
    
    
   
}



int minkneed(int arr[] , int size , int k){
    
    // cout no of element less than equal to k 
    int count = 0 ;
    for(int i = 0 ; i < size ; i ++){
        if(arr[i] <= k){
            count++;
        }
    }
    
    //for first window
    int bad = 0 ;
    for( int i = 0 ; i < count ; i ++){
        if(arr[i] > k){
            bad++;
        }
    }
    
    int ans = bad;
    
    
    bad = 0 ;
    // for rest window 
    
    while(count == size){
        
        for( int i = 0 ; i < count ; i ++){
        if(arr[i] > k){
            bad++;
        }
        
       
        int ans = min(ans , bad) ;
        bad = 0 ;
        i++;
        count++;
    }
    
    }
    
    
    
    
    return ans;
    
}


void twosum(int arr[] , int size , int target){
    
    int start = 0 ; 
    int end = size -1;
   
    for(int i = 0 ; start < end ; i++ ){
        
        if(arr[start] + arr[end] == target){
            cout<<"pair is - "<<arr[start]<<" + "<<arr[end]<<" = "<<target<<endl;
            start++;
            end--;
        }
        
         if(arr[start] + arr[end] < target){
           start++;
        }
        
         if(arr[start] + arr[end] > target){
            end--;
        }
    }
    
}

void threesum(int arr[] , int size , int target){
    
    for(int i = 0 ; i < size ; i ++){
        int p = target - arr[i];
        twosum(arr,size,p);
    }
}

int main()
{
    int size1 = 7;
    int size2 = 5;
    int arr1[100];
    int arr2[100];
    int arr[100];
    inputarr(arr1, size1);
   
    inputarr(arr2, size2);
     cout<<minkneed(arr,size,k);
     cyclicrotate(arr,size,n);
    // swap(arr,5);
    // reverse(arr, size);
    //negative(arr,size);
    //cout<<palindrome(arr,size);
    //sort012(arr, size);
    //outputarr(arr1, size1);
    //unionarra(arr1 , arr2 , arr , size1 , size2);
    interarra(arr1 , arr2 , arr , size1 , size2);
    return 0;
}



------------------------


#include <iostream>
#include <algorithm>
using namespace std;


int main()
{
    int arr[] = {-2, -3, 4, -1, 100, 1, 5, -3};
    int size = 8;
    int int_result = -44;
    // brute force 
 /*   int sum = 0 ;
    for(int i = 0 ; i < size ; i++){
        for(int j = i ; j<size;j++){
            sum = sum + arr[j];
         
          int_result = max(int_result, sum);
        }
        
        sum = 0 ;
     
        
    }
cout<<int_result;
*/
// Kadaneâ€™s Algorithm

int sum = 0  , p = 0 , k = 0;

        for(int j = 0 ; j<size;j++){
           
            sum = sum + arr[j];
         
         if(int_result < sum){
          int_result = max(int_result, sum);
         p = j;
      
         }
          if(sum<0){
            
              sum = 0 ;
               k = j + 1;
          }
          
        }
        
        cout<<int_result<<" "<<arr[k]<<" "<<arr[p];


    return 0;
}



------------------------


