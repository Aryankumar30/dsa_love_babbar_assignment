#include <iostream>
using namespace std;

void inputarr(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cin >> arr[i];
    }
}

void outputarr(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << " ";
    }
}

void swap(int arr[], int size)
{
    for (int i = 0; i < size - 1; i += 2)
    {
        int temp = arr[i];
        arr[i] = arr[i + 1];
        arr[i + 1] = temp;
    }
}
// 12 34

void reverse(int arr[], int size)
{
    int p = 0;
    int j = size - 1;

    for (int i = 0; p < j; i++)
    {
        int temp = arr[p];
        arr[p] = arr[j];
        arr[j] = temp;
        p++;
        j--;
    }
}

int sort012(int arr[], int size)
{
    int zero = 0;
    int one = 0;
    int two = 0;
    for (int i = 0; i < size; i++)
    {
        if (arr[i] == 0)
        {
            zero++;
        }

        if (arr[i] == 1)
        {
            one++;
        }

        if (arr[i] == 2)
        {
            two++;
        }
    }

    int i = 0;

    while (zero != 0)
    {
        arr[i] = 0;
        zero--;
        i++;
    }

    while (one != 0)
    {
        arr[i] = 1;
        one--;
        i++;
    }

    while (two != 0)
    {
        arr[i] = 2;
        two--;
        i++;
    }
    return 0 ;
}

int palindrome(int arr[] , int size){
    int p = 0 ;
    int q = size - 1;
    
    for(int i = 0 ; i < size ; i ++){
        if(arr[p] != arr[q]){
            
            return false;
            
        }
        p++;
        q--;
    }
    return true;
}

void negative(int arr[] , int size){
    int p = 0 ;
    
    
    for(int i = 0 ; i < size ; i ++){
        if(arr[i] < 0 ){
            int temp = arr[p];
            arr[p] = arr[i];
            arr[i] = temp;
            
            p++;
        }
    }
    
}


int main()
{
    int size = 7;
    int arr[100];
    inputarr(arr, size)
    // swap(arr,5);
    // reverse(arr, size);
    negative(arr,size);
    cout<<palindrome(arr,size);
    sort012(arr, size);
    outputarr(arr, size);
    return 0;
}

