#include <iostream>
using namespace std;
#include <algorithm>
void inputarr(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cin >> arr[i];
    }
}

void outputarr(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << " ";
    }
}

int binarysearch(int arr[] , int size , int target){
    
    int start = 0 ;
    int end = size -1;
    int mid = ( start + end ) / 2;
    
    while(start <= end){
        
        if(arr[mid] == target){
            return mid;
        }
        
         if(arr[mid] < target){
            start = mid + 1;
        }
        
        
         if(arr[mid] > target){
           end = mid - 1;
        }
        
        
          mid = ( start + end ) / 2;
        
    }
    return -1 ;
}

int firstsearch(int arr[] , int size , int target){
    
    int start = 0 ;
    int end = size -1;
    int mid = ( start + end ) / 2;
    
    while(start <= end){
        
        if(arr[mid] == target){
            
            if(mid == 0 ){
                return mid;
            }
           if(arr[mid] == arr[mid -1]){
               end = mid ;
               
           }
           else
           return mid;
        }
        
         if(arr[mid] < target){
            start = mid + 1;
        }
        
        
         if(arr[mid] > target){
           end = mid - 1;
        }
        
        
          mid = ( start + end ) / 2;
        
    }
    return -1 ;
}


int lastsearch(int arr[] , int size , int target){
    
    int start = 0 ;
    int end = size -1;
    int mid = ( start + end ) / 2;
    
    while(start <= end){
        
        if(arr[mid] == target){
             if(mid == size -1 ){
                return mid;
            }
           if(arr[mid] == arr[mid +1]){
               start = mid ;
               
           }
           else
           return mid;
        }
        
         if(arr[mid] < target){
            start = mid + 1;
        }
        
        
         if(arr[mid] > target){
           end = mid - 1;
        }
        
        
          mid = ( start + end ) / 2;
        
    }
    return -1 ;
}



int main()
{
    int arr[100];
    int size , target;
    cin>>size;
   
     inputarr(arr,size);
     cout<<"target";
     cin>>target;
     //cout<<binary_search(arr, arr + size , target); //stl to find no is present or not but #include <algorithm> needed to added
     
  
     //cout<<lastsearch(arr,size,target);
   
    
    
    return 0;
}
