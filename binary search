#include <iostream>
using namespace std;
#include <algorithm>
void inputarr(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cin >> arr[i];
    }
}

void outputarr(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << " ";
    }
}

int binarysearch(int arr[] , int size , int target){
    
    int start = 0 ;
    int end = size -1;
    int mid = ( start + end ) / 2;
    
    while(start <= end){
        
        if(arr[mid] == target){
            return mid;
        }
        
         if(arr[mid] < target){
            start = mid + 1;
        }
        
        
         if(arr[mid] > target){
           end = mid - 1;
        }
        
        
          mid = ( start + end ) / 2;
        
    }
    return -1 ;
}
void inputarrno(int arr[] , int no){
    for(int i = 1 ; i <= no ; i++ ){
        arr[i] = i;
    }
}
int squareroot(int arr[] , int no){


      int start = 0 ;
    int end = no -1;
    int mid = ( start + end ) / 2;
 
     while(start <= end){
        
        if(arr[mid] * arr[mid] == no){
            
          
          
           return mid;
        }
        
         if(arr[mid]*arr[mid] < no){
            start = mid + 1;
        }
        
        
         if(arr[mid] * arr[mid] > no ){
           end = mid - 1;
        }
        
        
          mid = ( start + end ) / 2;
        
    }
    
    return -1;
    
    
    
}


int firstsearch(int arr[] , int size , int target){
    
    int start = 0 ;
    int end = size -1;
    int mid = ( start + end ) / 2;
    
    while(start <= end){
        
        if(arr[mid] == target){
            
            if(mid == 0 ){
                return mid;
            }
           if(arr[mid] == arr[mid -1]){
               end = mid ;
               
           }
           else
           return mid;
        }
        
         if(arr[mid] < target){
            start = mid + 1;
        }
        
        
         if(arr[mid] > target){
           end = mid - 1;
        }
        
        
          mid = ( start + end ) / 2;
        
    }
    return -1 ;
}


int lastsearch(int arr[] , int size , int target){
    
    int start = 0 ;
    int end = size -1;
    int mid = ( start + end ) / 2;
    
    while(start <= end){
        
        if(arr[mid] == target){
             if(mid == size -1 ){
                return mid;
            }
           if(arr[mid] == arr[mid +1]){
               start = mid ;
               
           }
           else
           return mid;
        }
        
         if(arr[mid] < target){
            start = mid + 1;
        }
        
        
         if(arr[mid] > target){
           end = mid - 1;
        }
        
        
          mid = ( start + end ) / 2;
        
    }
    return -1 ;
}


int fixedpoint(int arr[] , int size){
    
    int p = 0 ;
 
    int start = 0 ;
    int end = size -1;
    int mid = ( start + end ) / 2;
 
    while(start <= end){
        
        if(arr[mid] == mid){
            
            
return mid;
          
        }
        
         if(arr[mid] < mid){
            start = mid + 1;
        }
        
        
         if(arr[mid] > mid){
           end = mid - 1;
        }
        
        
          mid = ( start + end ) / 2;
        
    }
    

    return -1;
    
}


int peakinmountain(int arr[] , int size ){
    
    int start = 0 ;
    int end = size -1;
    int mid = ( start + end ) / 2;
    
    while(start < end){
        
        if(arr[mid] < arr[mid + 1]){
            start = mid + 1;
        }
        
         
        
        
         if(arr[mid] > arr[mid + 1]){
          
           end = mid;
        }
        
        
          mid = ( start + end ) / 2;
        
    }
    return end ;
}



int pivoit(int arr[] , int size ){
    
    int start = 0 ;
    int end = size -1;
    int mid = ( start + end ) / 2;
    
    while(start < end){
        
        
        
         if(arr[mid] < arr[size -1]){
             
            end = mid;
        }
        
        
         if(arr[mid] > arr[size -1]){
          start = mid + 1;
        }
        
        
          mid = ( start + end ) / 2;
        
    }
    return end ;
}


int binarysearchrotaded(int arr[] , int start , int end , int target){
    

    int mid = ( start + end ) / 2;
    
    while(start <= end){
        
        if(arr[mid] == target){
            return mid;
        }
        
         if(arr[mid] < target){
            start = mid + 1;
        }
        
        
         if(arr[mid] > target){
           end = mid - 1;
        }
        
        
          mid = ( start + end ) / 2;
        
    }
    return -1 ;
}

int rotatedsearcharray(int arr[] , int size , int target){
  int  p = pivoit(arr,size);
 
    int ans = 0 ;
    if(arr[p] <= target && target <= arr[size -1 ]){
       ans = binarysearchrotaded(arr, p , size -1 , target );
    }
    else
    {
        ans = binarysearchrotaded(arr , 0 , p-1 , target);
    }
    
    return ans;
}

int main()
{
    int arr[100];
    int size , target;
    cin>>size;
   
     inputarr(arr,size);
     cout<<"target";
     cin>>target;
     //cout<<binary_search(arr, arr + size , target); //stl to find no is present or not but #include <algorithm> needed to added
     cout<<fixedpoint(arr,size);
  cout<<peakinmountain(arr,size);
     //cout<<lastsearch(arr,size,target);
   
    
    
    return 0;
}
