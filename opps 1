private - acces only in class (use get data set data);
public - acess anywhere 


puclic 


#include <iostream>

using namespace std;

class human {
   public:
 char gender ;
    int age;
    
   
};
int main()
{
   human obj;
   
   obj.gender = 'g';
   obj.age = 6;
   cout<<obj.age;
  


    return 0;
}
---------- dynemic public

#include <iostream>

using namespace std;

class human {
   public:
 char gender ;
    int age;
    
    void setage(int g){
        age = g ;
    }
    
    int getage(){
        return age;
    }
   
};
int main()
{
   human *obj = new human(); // heap memory me obj 
 
   //   human * obj = new human(); // heap memory me obj 
   // cout<<obj->age<<endl; // 
  obj->setage(8);
     cout<<obj->age<<endl; // 
  

    return 0;
}


private - 


#include <iostream>

using namespace std;

class human {
  public:
 char gender ;
    int age;
    public:
  void setage(int a){
    
       age = a;
      
   }
   
  void setgender(char a){
       gender = a;
   }
   
  int getage(){
      return age;
  }
   char getgender(){
      
       return gender;
   }
};


int main()
{
   human obj;
 
  obj.setgender('M');
  obj.setage(12);
  
  cout<<obj.getgender();
  cout<<obj.getage();
  

    return 0;
}


-----------------------------------

constructor 


#include <iostream>

using namespace std;

class human {
  
 char gender ;
    int age;
   
  public:
  human(int a , char b){ // parameterise constructor
   cout<<"parameterise constructor"<<endl;
      age = a;
      gender = b;
  }
 
   
  human (){     // defalt
  
      cout<<"defalt"<<endl;
      cin>>age>>gender;
      
  }
  human(human &a){ // copy constructor
   cout<<"copy"<<endl;
      age = a.age ;
       this->gender = b; // means this use for this object ke liye
  }
  
  void display(){
      cout<<age<<endl<<gender;
  }
  
};


int main()
{
   human obj(12,'s');
   obj.display();
 human obj2(obj);
 obj2.display();
human obj3;

 
  obj3.display();

  

    return 0;
}

notes 

   this->gender = b; // means this use for this object ke liye
----------------

destructor  ~



#include <iostream>

using namespace std;

class human {
  
 char gender ;
    int age;
   
  public:
  human(int a , char b){ // parameterise constructor
   cout<<"parameterise constructor"<<endl;
      this->age = a;
      this->gender = b; // means this use for this object ke liye
  }
 
   
  human (){     // defalt
  
      cout<<"defalt"<<endl;
      cin>>age>>gender;
      
  }
  human(human &a){ // copy constructor
   cout<<"copy"<<endl;
      age = a.age ;
      gender = a.gender;
  }
  
  void display(){
      cout<<age<<endl<<gender;
  }
  
  ~ human(){ // destructor but only for static memory , dynamic ke liye manuly krana pade ga ex - delete obj;
      cout<<"destructor called for each object"; // use to free memory
  }
};


int main()
{
   human obj(12,'s');
   obj.display();
 human obj2(obj);
 obj2.display();
human obj3;

 
  obj3.display();

  

    return 0;
}
------------------------

shallow vs deep condtructor ? isko check kro (love babbar youtube )
