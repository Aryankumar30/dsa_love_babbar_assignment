code will be uplode within 48 hour 


#include <iostream>

using namespace std;

int binarysearch(int arr[][3] , int n , int m , int mid , int target){
    int start = 0 ;
    int end = m-1;
    int mid2 = (start + end ) / 2;
   
    while(start <= end){
        
        if(arr[mid][mid2] == target){
        
            return arr[mid][mid2];
        }
        
        if(arr[mid][mid2] < target){
            start = mid2 + 1;
           
           
        }
         if(arr[mid][mid2] > target){
           end = mid2 - 1;
        }
        
       
        mid2 = (start + end) / 2;
         
    }
  
 return false;
    
}

int search(int arr[][3] , int n , int m , int target){
    int start = 0 ; 
    int end = n - 1;
    int mid = (start + end ) / 2;
    
    while(start <= end){
        
        
          if(arr[mid][0] > target){
            end = mid - 1 ;
        }
         if(arr[mid][m-1] < target){
            start = mid + 1;
        }
         
        if(arr[mid][0] <= target  && target <= arr[mid][m-1] ){
         
            
          int ans =   binarysearch(arr , n , m, mid , target);
        
        return ans ;
        }
         
        
         mid = (start + end ) / 2;
            
    }
    
    return false;
}



int treesearch(int arr[] , int n , int largest , int target){
    int start = 1 ; 
    int end = largest;
    int mid = (start + end ) / 2;
    
     int sum = 0 , ans = 0;
    while(start <= end){
        sum = 0 ;
      
        for(int i = 0 ; i < n ; i++){
              
            if(arr[i] >= mid){
                sum = arr[i] - mid + sum ;
            
            }
        
        }
       
  
          if( sum >= target){
             
              start = mid + 1;
             ans = sum;
            
        }
         if(sum < target){
             end = mid - 1 ;
        }
        
      
        
         mid = (start + end ) / 2;
         
    }
    
   
    return mid;
}




int main()
{
   int arr[3][3] ={1,3,4,5,6,7,8,9,22};
   
   int n = 3;
   int m = 3;
   
   int target;
   cin>>target;
   
   cout<<search(arr , n , m , target);
   

    return 0;
}
// 1 3 4 
// 5 6 7 
// 8 9 22
