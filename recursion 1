what is recursion ??
when a func call itself here we divide big problem into small peoblrm .

Mandatoy condition for recurssion - 1. base case 
                                    2. Recursive call/ Recursive Relation 
                                    
 1. base case  - rukna kha haii 
 2. Recursive call/ Recursive Relation - same sunction jo call liya
 
 
 A recursion include base case , processing (kuch kuch code ) , Recursive call
                  
  Types of Recursion -
  
  1. Tail Recursion - if Recursion call is at end
  2. Head Recursion - if Recursion call is above prossing part 

----------------------------------


#include <iostream>

using namespace std;

void no(int n){
   if(n <= 0 ){
       return ;
   } 
   
  
   no(n-1);  // output - 1 2 3 4 5
    cout<<n;
 // no(n-1);  // output - 5 4 3 2 1 // look here carefully 
}
int main()
{
   int n = 5 ;
   
no(n);

    return 0;
}

------------------------------------------

// search

#include <iostream>

using namespace std;

int search(int n , int k , int arr[],int i){
   
    // base case 
    if(i>= n){
        return -1;
    }
    
    if(k == arr[i]){
        
        return i;
    }
        i++;
    // recurssion 
   return search(n,k,arr,i);
    
   
}
int main()
{
  int n = 5;
 int arr[5] = {5,9,2,0,1};
int k = 90;
cout<<search(5,k,arr,0);
    return 0;
}

-------------------------------------

//max

#include <iostream>

using namespace std;

int maxx(int n , int max , int arr[]){
   n--;
    // base case 
   if(n<0){
    
       return max ;
   }
    // recurssion 
  if(arr[n]>max){
      max = arr[n];
  }

 return maxx(n,max,arr);
  
   
}
int main()
{
  int n = 5;
 int arr[5] = {590876,9,2,0,100};
int max = -99990;
cout<<maxx(5,max,arr);
    return 0;
}

--------------------------------------------------

//expo 

#include <iostream>

using namespace std;

int expo(int n){
    //base case
    if(n == 0){
        return 1;
    }
     // reurssion
    
    int smallans = expo(n/2);
    
    if(n&1){
        return smallans*smallans*2;
    }
    else
    return smallans*smallans;
    
}

int main()
{
  int n = 5;
 
cout<<expo(n);
return 0;
}

-----------------------------------

// Online C++ compiler to run C++ program online
// array is sorted or not
#include <iostream>
using namespace std;

bool sort(int n, int arr[]){
    // base case 
    
    int i,j;
    i = --n;
    
    j = i-1;
    
    if(arr[i] < arr[j]){
      
     return false;
    }
    
    if(i == 1){
       
        return true;
    }
  
    // recurssion 
 return sort(n--,arr);

}
int main()
{
    int n = 5;
    int arr[5] = {1,3,5,7,9};
    
    cout<<sort(5,arr);
    return 0;
}

----------------------

// array sum 


#include <iostream>

using namespace std;

int summ(int arr[] , int n, int sum){
    int i = --n;
    if(n < 0){
        return sum;
    }
    
    sum = arr[i] + sum;
    
    return summ(arr,n--,sum);
}
int main()
{
    int n = 5;
    int arr[] ={1,-4,5,2,5};
    int sum = 0 ;
    cout<<summ(arr,n,sum);

    return 0;
}

----------------------------------------


#include <iostream>

using namespace std;

int b_s(int arr[] , int start ,int end ,int key){
// base case 
int mid =( start + end)/2;
if(start > end){
    return -1;
}
if(arr[mid] ==key){
    return mid;
}
//recurssion

if(arr[mid] <key){
   return b_s(arr,mid+1,end,key);
}

if(arr[mid]>key){
   return b_s(arr,start,mid-1,key);
}
return -1;
}
int main()
{
    int n = 5;
    int arr[] ={1,4,6,18,29};
    int key=29;
    int start=0;
    int end = n-1;
    cout<<b_s(arr,start,end,key);

    return 0;
}


--------------------



#include <iostream>

using namespace std;

int freq(int n , int ans){
//base case 
if(n == 0){
    return 0;
}
if(n <=1){
    return ans;
}


ans = ans * n;

 return freq(--n,ans);
}
int main()
{
    int n = 5;
  int ans =1;
  cout<<freq(n,ans);

    return 0;
}
