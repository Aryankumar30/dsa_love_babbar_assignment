#include <iostream>
using namespace std;


// reference variable - diff name same variable

int fun(int &p){
    p = p + 1;
    
    return p ;
}
int main()
{
   int a = 21;
   int & b = a; // creating refrenece variable
 
   a++;
   b++;
   
   cout<<fun(b);
   cout<<b<<endl<<a<<endl;
   
   
   // why we need refrenece variable 
   // memory ni leta function me pass by refrenece
   
   
   // int arr[n] - this is a bad way to declear array becouse here he are use static memory allocation
   
   // int * arr = new int [n]; way to dynamic allocate memory 
   //  static      dynamic 
   
  // how to delete dynamic memory to save memory leakage ??
  
  // delete * ptr ;
  // delete [] arr;
  
  //void pointer - points to any type 
  
  
#include <iostream>
using namespace std;

int main()
{
	int a = 10;
	char b = 'x';
	
	void* p = &a; // void pointer holds address of int 'a'
    cout<<*(int*)p;
	p = &b; // void pointer holds address of char 'b'
	cout<<*(char*)p;

}

// This code is contributed by sarajadhav12052009

  
  
  // -----------------------------------------creating 2d array -----------------------
  
  int n , m ;
  
 cin>>n>>m;
 
 int **arr = new int*[m];
 
 for(int i = 0 ; i < m ; i++){ // for each row we are crsting array
     arr[i] = new int[n];
 }
 
 for(int i = 0 ; i < m ; i++){
     for(int j = 0 ; j<n;j++){
         cin>>arr[i][j];
     }
 }
 
  for(int i = 0 ; i < m ; i++){
     for(int j = 0 ; j<n;j++){
         cout<<arr[i][j];
     }cout<<endl;
 }
 
 // deleting 
 for(int i = 0 ; i < m ; i++){ 
    delete []arr[i];
 }
 
 delete []arr;

 
    return 0;
}

// h/w - jacked array 
macro function - define wala 
1. fast
2. no space 
3. replace value of pi
4.
5.

---------------------------------------------------------------

// refrenece variable me hum jisko dege ehi change kr paye ga variable ka value bss , globel me koi bhi kr deta hai
#include <iostream>

using namespace std;
int sum2(int sum){
    sum = sum + 10 ;
  return sum;
}
int sum1(int &sum){
    cout<<sum<<"sum";
    sum = sum + 10 ;
   return sum;
}



int sum3(int &sum){
    sum = sum + 10 ;
   return sum;
}
int main()
{
   int a = 4;
   int &b = a;
   
   
   cout<<sum2(a)<<endl;
    cout<<sum1(a)<<endl;
    cout<<sum3(a);
   

    return 0;
}

------------

default aggument - default value of parameter .
it goes right to left

right way 

#include <iostream>
using namespace std;
int sum(int a  , int b , int c = 9){
    int ans = a+ b +c;
    return ans;
}
int main()
{
    cout<<sum(2,3);
    return 0;
}

wrong way


#include <iostream>
using namespace std;
int sum(int a = 9 , int b , int c ){
    int ans = a+ b +c;
    return ans;
}
int main()
{
    cout<<sum(2,3);
    return 0;
}

-------------------


Read about inline function - basically time save krte hai hum 1 line wale function ke liye . just like macro it work .
